#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Function to perform binary search to find the insertion point
// Returns the index of the first element in arr2 greater than key
int binarySearch(int arr2[], int size, int key) {
    int low = 0, high = size - 1, mid;
    int result = size; // Default to size, means no element is greater
    
    while (low <= high) {
        mid = low + (high - low) / 2;
        
        if (arr2[mid] > key) {
            result = mid; // Update result to this index
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    
    return result;
}

int minOperationsToMakeIncreasing(int* arr1, int arr1Size, int* arr2, int arr2Size) {
    // Initialize a DP array to store the minimum operations required
    int dp[arr1Size];
    dp[0] = 0; // No operations needed for the first element
    
    // Process each element in arr1
    for (int i = 1; i < arr1Size; ++i) {
        int prevValue = arr1[i - 1];
        int currValue = arr1[i];
        
        // Find the smallest element in arr2 greater than prevValue
        int idx = binarySearch(arr2, arr2Size, prevValue);
        
        // Case 1: Replace arr1[i] with arr2[idx], if valid
        if (idx < arr2Size && arr2[idx] > prevValue) {
            dp[i] = dp[i - 1] + 1;
        } else {
            dp[i] = INT_MAX; // Initialize as impossible state
        }
        
        // Case 2: Replace arr1[i] with arr2[idx-1], if valid
        if (idx > 0 && arr2[idx - 1] > prevValue) {
            dp[i] = dp[i] > dp[i - 1] + 1 ? dp[i - 1] + 1 : dp[i];
        }
    }
    
    // The result is stored in dp[arr1Size - 1]
    return dp[arr1Size - 1] == INT_MAX ? -1 : dp[arr1Size - 1];
}

// Example usage
int main() {
    int arr1[] = {1, 5, 3, 6, 7};
    int arr2[] = {1, 3, 2, 4};
    
    int arr1Size = sizeof(arr1) / sizeof(arr1[0]);
    int arr2Size = sizeof(arr2) / sizeof(arr2[0]);
    
    int result = minOperationsToMakeIncreasing(arr1, arr1Size, arr2, arr2Size);
    printf("Output: %d\n", result); // Output: 1
    
    return 0;
}
